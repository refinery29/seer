#!/usr/bin/env python
# -*- coding: utf8 -*-
# pylint: disable=anomalous-backslash-in-string,too-few-public-methods,no-self-use,wrong-import-position,dangerous-default-value

"""
seer, the Simple Effective Endeavor Runner

A runner which supports .travis.yml config files for testing.
"""

from __future__ import print_function

import argparse
import os
import select
import subprocess
import sys
import time
from socket import error as socket_error

import git
import paramiko
import shade
import yaml

import termcolor

from watchdog.observers import Observer
from watchdog.events import RegexMatchingEventHandler


WATCH_HELP = 'Watch the current directory for changes and run the ci tests on changes'
DEFAULT_CI_FILES = ['seer.yml', 'citest.yml', 'ci.yml', '.travis.yml']
TEST_FILE_HELP = 'File where ci tests are defined. Looks by default for {}.'.format(
    ' or '.join(DEFAULT_CI_FILES))
DEFAULT_SECTIONS = ['script', 'modified']
UNCOLORED = (lambda s, c: s)


class OpenStackExecutor:
    def __init__(self, image=None, key_name=None, flavor=None, hostname=None, connection_timeout=120):
        # TODO this will fail without login credentials in the shell env
        self.cloud = shade.openstack_cloud()
        # TODO server config should not be hardcoded
        self.server = self.cloud.create_server(
                hostname,
                image=image,
                flavor=flavor,
                key_name=key_name,
                wait=True
        )
        self.connection_timeout = connection_timeout
        self.transport = None
        self.client = None
        time.sleep(5)

    def connect(self):
        self.client = paramiko.SSHClient()
        # TODO maybe do something rather than always accept keys
        self.client.set_missing_host_key_policy(paramiko.client.AutoAddPolicy)
        # TODO username should not be hardcoded
        timesup = time.time() + self.connection_timeout
        while True:
            try:
                self.client.connect(self.server.addresses['provider'][0]['addr'], username='ubuntu')
                break
            except paramiko.ssh_exception.NoValidConnectionsError as e:
                current_time = time.time()
                if current_time > timesup:
                    raise e
                pass
            except socket_error as e:
                current_time = time.time()
                if current_time > timesup:
                    raise e
                pass

        self.transport = self.client.get_transport()

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.destroy()

    def destroy(self):
        self.client.close()
        self.cloud.delete_server(self.server)

    def run_command(self, command, timeout=30):
        channel = self.transport.open_session()
        channel.set_combine_stderr(True)
        channel.get_pty()
        channel.exec_command(command)

        # From https://stackoverflow.com/a/32758464/1054423
        print(channel.recv(channel.in_buffer), end='')
        # chunked read to prevent stalls
        while not channel.closed or channel.recv_ready() or channel.recv_stderr_ready():
                  # stop if channel was closed prematurely, and there is no data in the buffers.
            got_chunk = False
            readq, _, _ = select.select([channel], [], [], timeout)
            for c in readq:
                 if c.recv_ready():
                     print(channel.recv(len(c.in_buffer)), end='')
                     got_chunk = True
                 if c.recv_stderr_ready():
                     # make sure to read stderr to prevent stall
                     channel.recv_stderr(len(c.in_stderr_buffer))
                     got_chunk = True
            '''
            1) make sure that there are at least 2 cycles with no data in the input buffers in order to not exit too early (i.e. cat on a >200k file).
            2) if no data arrived in the last loop, check if we already received the exit code
            3) check if input buffers are empty
            4) exit the loop
            '''
            if not got_chunk \
               and channel.exit_status_ready() \
               and not channel.recv_stderr_ready() \
               and not channel.recv_ready():
                # indicate that we're not going to read from this channel anymore
                channel.shutdown_read()
                # close the channel
                channel.close()
                break    # exit as remote side is finished and our bufferes are empty

        return channel.exit_status


def _run_scripts(scripts, colored=UNCOLORED, directory='.', executor=None):
    """Run the scripts"""
    if not isinstance(scripts, list):
        scripts = [scripts]
    os.chdir(directory)
    rcs = []
    for script in scripts:
        print(colored('Running {}'.format(script), 'blue'))
        return_code = executor.run_command(script)

        if return_code != 0:
            rcs.append(return_code)
            print(colored('Script {} failed with {}'.format(
                script, return_code), 'red'))
    return rcs

def _run_script(script, colored=UNCOLORED, directory='.'):
    os.chdir(directory)
    try:
        return_code = subprocess.call(script, shell=True)
    except KeyboardInterrupt:
        print(colored('Aborting, try again later ;)', 'blue'))
    return return_code

def run_ci_file(ci_file,
                colored=UNCOLORED,
                exit_on_err=False,
                sections=DEFAULT_SECTIONS):
    """
    Run the definition in a ci file
    """
    with open(ci_file) as ci_file:
        rcs = []
        ci_definition = yaml.load(ci_file)

        # Get test server configuration
        image = ci_definition.get('image', 'hackathon-foundry')
        key_name = ci_definition.get('key_name', 'bs-macmini')
        flavor = ci_definition.get('flavor', 'u1.small')
        hostname = ci_definition.get('name', 'seer' + time.strftime('%s'))

        with OpenStackExecutor(image=image, key_name=key_name, flavor=flavor, hostname=hostname) as executor:
            print('In executor with')
            if 'script' in ci_definition and 'script' in sections:

                new_rcs = _run_scripts(ci_definition['script'], colored=colored, executor=executor)
                if new_rcs:
                    print(colored('Scripts failed :(', 'red'))
                else:
                    print(colored('Scripts passed :)', 'green'))

                rcs.extend(new_rcs)

        if 'modified' in ci_definition and 'modified' in sections:
            modified = ci_definition['modified']
            new_rcs = _run_modified(modified, colored=colored)

            if new_rcs:
                print(colored('Modified directory scripts failed :(', 'red'))
            else:
                print(colored('Modified directory scripts passed :)', 'green'))

            rcs.extend(new_rcs)

    if exit_on_err and rcs:
        exit(max(rcs))

def watch_repo(ci_test_file, colored=UNCOLORED, sections=DEFAULT_SECTIONS):
    """
    Watch the directory tree starting at the current
    directory and run scripts if changes are made.
    """

    class CIRunnerEventHandler(RegexMatchingEventHandler):
        """Event handler for watchdog"""
        def on_any_event(self, event):
            """Run scripts on any file change."""
            print(u'Detected that {} was {}, running travis testsâ€¦\n'.format(
                event.src_path, event.event_type))
            run_ci_file(ci_test_file,
                        exit_on_err=False,
                        colored=colored,
                        sections=sections)

    path = os.path.realpath('.')
    print(colored('Watching {}'.format(path), 'green'))
    ignore_regexes = ['.*\.git.*']
    event_handler = CIRunnerEventHandler(ignore_regexes=ignore_regexes,
                                         ignore_directories=True)

    observer = Observer()
    observer.schedule(event_handler, path, recursive=True)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

def _flagged_dirs(gitfiles, flagfiles):
    for gitfile in gitfiles:
        for flag in flagfiles:
            if os.path.basename(gitfile) == flag:
                yield os.path.realpath(os.path.dirname(gitfile))
                continue

def _modified_flagged_dirs(flagged_dirs, modified_dirs):
    flagged_dirs = list(flagged_dirs)
    for modified in modified_dirs:
        for flagged in flagged_dirs:
            if os.path.realpath(modified).startswith(flagged):
                yield os.path.realpath(flagged)
                continue

def _run_modified(modified, colored=UNCOLORED):
    flag_files = modified.get('flag_file', 'makefile')
    flag_files = flag_files if isinstance(flag_files, list) else [flag_files]
    scripts = modified.get('script', 'make')
    scripts = scripts if isinstance(scripts, list) else [scripts]
    diff = modified.get('diff', 'origin/master')
    repo = git.Git('.')
    diff_files = repo.diff(diff, '--name-only').split('\n')
    flagged_dirs = _flagged_dirs(repo.ls_files().split('\n'), flag_files)
    modified_test_dirs = _modified_flagged_dirs(flagged_dirs, diff_files)
    rcs = []
    for modified_dir in set(modified_test_dirs):
        print(colored('Running scripts in modified directory {}'.format(modified_dir)))
        rcs.extend(_run_scripts(scripts, colored=colored, directory=modified_dir))

    return rcs

def parse_args(parsable_args):
    """Parse script arguments"""
    argument_parser = argparse.ArgumentParser(prog='seer')
    argument_parser.add_argument('-f', '--ci-file',
                                 default=None,
                                 help=TEST_FILE_HELP)
    argument_parser.add_argument('-m', '--modified',
                                 action='store_true')
    argument_parser.add_argument('-p', '--no-color',
                                 action='store_true',
                                 help=TEST_FILE_HELP)
    argument_parser.add_argument('-s', '--scripts',
                                 action='store_true')
    argument_parser.add_argument('-w', '--watch',
                                 action='store_true',
                                 help=WATCH_HELP)
    return (argument_parser.parse_args(parsable_args), argument_parser)

def main(args, argument_parser):
    """handle arguments"""
    ci_files = [args.ci_file] + DEFAULT_CI_FILES

    ci_file = None
    for ci_file in ci_files:
        if not ci_file or not os.path.isfile(ci_file):
            continue
        else:
            break
    else:
        argument_parser.print_help()
        exit(1)

    if args.no_color:
        # pylint: disable=redefined-outer-name,unused-argument
        def nocolored(string, color=None):
            """No color replacement for colored"""
            return string
        colored = nocolored
    else:
        colored = termcolor.colored

    sections = []
    if args.scripts:
        sections.append('script')
    if args.modified:
        sections.append('modified')

    exit_on_err = not args.watch
    sections = sections or DEFAULT_SECTIONS
    run_ci_file(ci_file, exit_on_err=exit_on_err, colored=colored, sections=sections)

    if args.watch:
        watch_repo(ci_file, colored=colored, sections=sections)

if __name__ == '__main__':
    main(*parse_args(sys.argv[1:]))
